{% form_theme formulaireActivite 'bootstrap_3_layout.html.twig' %}
{% extends "::vueMere.html.twig" %}

{% block activeProposer %}active{% endblock %}
{% block title %}Proposer des activités{% endblock %}

{% block body %} 
    <!-- Titre de la page -->
    <section class="content-header">
      <h1>Proposer une activité</h1>
    </section>
      <section class="content">
        <div class="row">
          <div class="col-md-5">
            <small>Les champs marqués par une * sont obligatoires.</small>
            <form method="post" {{ form_enctype(formulaireActivite) }}>
              {{form_start(formulaireActivite)}}
              <div>
                {{ form_label(formulaireActivite.sportPratique) }} *
                {{ form_errors(formulaireActivite.sportPratique) }}
                {{ form_widget(formulaireActivite.sportPratique) }}
              </div>
               <div>
                {{ form_label(formulaireActivite.niveauRequis) }} *
                {{ form_errors(formulaireActivite.niveauRequis) }}
                {{ form_widget(formulaireActivite.niveauRequis) }}
              </div>
              <div>
                {{ form_label(formulaireActivite.dateHeureRDV) }} 
                {{ form_errors(formulaireActivite.dateHeureRDV) }}
                {{ form_widget(formulaireActivite.dateHeureRDV) }}
              </div>
              <div>
                {{ form_label(formulaireActivite.dateFermeture) }}
                {{ form_errors(formulaireActivite.dateFermeture) }}
                {{ form_widget(formulaireActivite.dateFermeture) }}
              </div>
              <div>
                {{ form_label(formulaireActivite.duree) }}
                {{ form_errors(formulaireActivite.duree) }}
                {{ form_widget(formulaireActivite.duree) }}
              </div>
              <div>
                {{ form_label(formulaireActivite.nbPlaces) }}
                {{ form_errors(formulaireActivite.nbPlaces) }}
                {{ form_widget(formulaireActivite.nbPlaces) }}
              </div>
              <div>
                {{ form_label(formulaireActivite.description) }}
                {{ form_errors(formulaireActivite.description) }}
                {{ form_widget(formulaireActivite.description) }}
              </div></br>
            </div>
            <div class="col-md-6">
                {{ form_label(formulaireActivite.adresseLieuRDV, 'Adresse du lieu de rendez-vous') }} *
                {{ form_errors(formulaireActivite.adresseLieuRDV) }}
                {{ form_widget(formulaireActivite.adresseLieuRDV) }}
                {{ form_label(formulaireActivite.adresseLieuDepart, 'Adresse du lieu de départ') }}
                {{ form_errors(formulaireActivite.adresseLieuDepart) }}
                {{ form_widget(formulaireActivite.adresseLieuDepart) }}
                {{ form_label(formulaireActivite.adresseLieuArrivee, "Adresse du lieu d'arrivée") }}
                {{ form_errors(formulaireActivite.adresseLieuArrivee) }}
                {{ form_widget(formulaireActivite.adresseLieuArrivee) }} <br>
                <div id="map" style="height:400px;"></div>
            </div>
            <div class="row">
              <div class="col-md-9"></div>
              <div class="col-md-3">
                <input type="submit" class="btn btn-primary" value="Publier"/>
                <a href="{{ path('moove_activite_tableauDeBord') }}"><button type="button" class="btn btn-warning">Annuler</button></a>
              </div>
            </div>
            {{form_end(formulaireActivite)}}
          </form>
          
        </div>
    </section>
{% endblock %}
{% block javascripts %}
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDmo1B7t569caLPAVZZNdcoH97JCnHRqNM&signed_in=true&libraries=places&callback=initialize"
        async defer></script>
    <script>
      var inputAdresseRDV = (document.getElementById('moove_activitebundle_activite_adresseLieuRDV'));
      var inputAdresseDepart = (document.getElementById('moove_activitebundle_activite_adresseLieuDepart'));
      var inputAdresseArrivee = (document.getElementById('moove_activitebundle_activite_adresseLieuArrivee'));
      var autocompleteLieuRDV;
      var autocompleteLieuDepart;
      var autocompleteLieuArrivee;
      
      var map;
      var service;
      
      function initialize() {
      
        var mapOptions = {
          center: {lat: 46.686111, lng: 1.875278}, // centre de la carte, ici de la France
          zoom: 5,                                 // niveau de zoom pour afficher correctement la france
          scrollwheel: true
        };
        var map = new google.maps.Map(document.getElementById('map'), mapOptions); // initilisation de la carte
        var options = {
          types: ['geocode'],
          componentRestrictions: {country: 'fr'}
        };
    
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocompleteLieuRDV = new google.maps.places.Autocomplete(inputAdresseRDV, options);
        autocompleteLieuDepart = new google.maps.places.Autocomplete(inputAdresseDepart, options);
        autocompleteLieuArrivee = new google.maps.places.Autocomplete(inputAdresseArrivee, options);
        autocompleteLieuRDV.bindTo('bounds', map);
        autocompleteLieuDepart.bindTo('bounds', map);
        autocompleteLieuArrivee.bindTo('bounds', map);
    
      var infowindowRDV = new google.maps.InfoWindow();
      var infowindowDepart = new google.maps.InfoWindow();
      var infowindowArrivee = new google.maps.InfoWindow();
      
      var markerRDV = new google.maps.Marker({map: map});
      var markerDepart = new google.maps.Marker({map: map});
      var markerArrivee = new google.maps.Marker({map: map});
      
      google.maps.event.addListener(markerRDV, 'click', function() {
        infowindowRDV.open(map, markerRDV);
      });
      google.maps.event.addListener(markerDepart, 'click', function() {
        infowindowDepart.open(map, markerDepart);
      });
      google.maps.event.addListener(markerArrivee, 'click', function() {
        infowindowArrivee.open(map, markerArrivee);
      });
      // Get the full place details when the user selects a place from the
      // list of suggestions.
      google.maps.event.addListener(autocompleteLieuRDV, 'place_changed', function() {
        infowindowRDV.close();
        var lieuRDV = autocompleteLieuRDV.getPlace();
        if (!lieuRDV.geometry) {
          return;
        }
    
        if (lieuRDV.geometry.viewport) {
          map.fitBounds(lieuRDV.geometry.viewport);
        } else {
          map.setCenter(lieuRDV.geometry.location);
          map.setZoom(17);
        }
    
        // Set the position of the marker using the place ID and location.
        markerRDV.setPlace(/** @type {!google.maps.Place} */ ({
          placeId: lieuRDV.place_id,
          location: lieuRDV.geometry.location
        }));
        markerRDV.setVisible(true);
    
        infowindowRDV.setContent('<div><strong>Lieu de rendez-vous</strong><br>' + lieuRDV.formatted_address + '</div>');
            //'Place ID: ' + place.place_id + '<br>' +
            
        infowindowRDV.open(map, markerRDV);
      });
      // Marker lieu de départ
      google.maps.event.addListener(autocompleteLieuDepart, 'place_changed', function() {
        infowindowDepart.close();
        var lieuDepart = autocompleteLieuDepart.getPlace();
        if (!lieuDepart.geometry) {
          return;
        }
    
        if (lieuDepart.geometry.viewport) {
          map.fitBounds(lieuDepart.geometry.viewport);
        } else {
          map.setCenter(lieuDepart.geometry.location);
          map.setZoom(17);
        }
    
        // Set the position of the marker using the place ID and location.
        markerDepart.setPlace(/** @type {!google.maps.Place} */ ({
          placeId: lieuDepart.place_id,
          location: lieuDepart.geometry.location
        }));
        markerDepart.setVisible(true);
    
        infowindowDepart.setContent('<div><strong>Lieu de départ</strong><br>' + lieuDepart.formatted_address + '</div>');
            //'Place ID: ' + place.place_id + '<br>' +
            
        infowindowDepart.open(map, markerDepart);
      });
      // Marker lieu d'arrivée
      google.maps.event.addListener(autocompleteLieuArrivee, 'place_changed', function() {
        infowindowArrivee.close();
        var lieuArrivee = autocompleteLieuArrivee.getPlace();
        if (!lieuArrivee.geometry) {
          return;
        }
    
        if (lieuArrivee.geometry.viewport) {
          map.fitBounds(lieuArrivee.geometry.viewport);
        } else {
          map.setCenter(lieuArrivee.geometry.location);
          map.setZoom(17);
        }
    
        // Set the position of the marker using the place ID and location.
        markerArrivee.setPlace(/** @type {!google.maps.Place} */ ({
          placeId: lieuArrivee.place_id,
          location: lieuArrivee.geometry.location
        }));
        markerArrivee.setVisible(true);
    
        infowindowArrivee.setContent("<div><strong>Lieu d'arrivée</strong><br>" + lieuArrivee.formatted_address + '</div>');
            //'Place ID: ' + place.place_id + '<br>' +
            
        infowindowArrivee.open(map, markerArrivee);
      });
    }
    </script>
{% endblock %}