<?php

namespace moove\ActiviteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;


/**
 * ActiviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActiviteRepository extends EntityRepository
{
    public function findByUtilisateurAccepter($idUtilisateur, $estAccepter, $terminer = null)
    {
        $requete = $this->getAllActivityForUser($idUtilisateur)
                        ->andWhere('p.estAccepte = :estAccepte')
                        ->setParameter('estAccepte', $estAccepter)
                    ;
        if(!is_null($terminer))
        {
            $requete->andWhere('a.estTerminee = :fini')
                    ->setParameter('fini', $terminer)
            ;
        }
        
        
        // on récupère la commande DQL
        $query = $requete->getQuery();
        
        // on retourne un tableau de résultat
        return $query->getResult();
    }
    
    public function findByUtilisateur($idUtilisateur, $terminer = null)
    {
        // on récupère la query de base de séléction des activités par utilisateur
        $requete = $this->getAllActivityForUser($idUtilisateur)->join('a.organisateur', 'u')
                ->addSelect('u')
                ->join('a.sportPratique', 's')
                ->addSelect('s')
                ->join('a.lieuRDV', 'lrdv')
                ->addSelect('lrdv')
                ->leftJoin('a.lieuDepart', 'ld')
                ->addSelect('ld')
                ->leftJoin('a.lieuArrivee', 'la')
                ->addSelect('la')
        ;
        
        // on ajoute la condition terminer ou non
        if(!is_null($terminer))
        {
            $requete->andWhere('a.estTerminee = :fini')
                    ->setParameter('fini', $terminer)
            ;
        }
        
        // on récupère la commande DQL
        $query = $requete->getQuery();
        
        // on retourne un tableau de résultat
        return $query->getResult();
    }


    /**
     * 
     * @param $idUtilisateur integer de l'user
     * @return (queryBuilder)
     */
    protected function getAllActivityForUser($idUtilisateur)
    {
        // création de la requete de base
        $requete = $this->_em->createQueryBuilder()
            ->select('a')
            ->from($this->_entityName, 'a')
            ->leftJoin('mooveActiviteBundle:Participer', 'p', 'WITH', 'a.id = p.activite')
            ->where('p.utilisateur = :idUtilisateur')
            
            ->orderBy('a.dateHeureRDV', 'DESC')
            ->setParameter('idUtilisateur', $idUtilisateur)
        ;
        
        return $requete;
    }
}
